From 61abedae11cbf380040132fb13b8f82b9e583ea0 Mon Sep 17 00:00:00 2001
From: Michael Sobolewski <sobol@sorcersoft.org>
Date: Thu, 28 Jan 2016 12:58:47 +0100
Subject: [PATCH] added coffeeMaker requestor

---
 examples/coffeemaker/build.gradle                  | 17 +++-
 .../pjatk/inn/coffeemaker/impl/CoffeeMaker.java    |  9 +-
 .../inn/requestor/CoffeeMakerExertRequestor.java   | 96 ++++++++++++++++++++++
 .../pjatk/inn/coffeemaker/CoffeeServiceTest.java   | 25 +++++-
 examples/service/build.gradle                      |  2 +-
 5 files changed, 143 insertions(+), 6 deletions(-)
 create mode 100755 examples/coffeemaker/src/main/java/edu/pjatk/inn/requestor/CoffeeMakerExertRequestor.java

diff --git a/examples/coffeemaker/build.gradle b/examples/coffeemaker/build.gradle
index 8ffad5b..7dbdb6f 100755
--- a/examples/coffeemaker/build.gradle
+++ b/examples/coffeemaker/build.gradle
@@ -112,6 +112,21 @@ task runCoffeemaker(type:JavaExec, dependsOn:[install]) {
     standardInput = System.in
 }
 
+//task runRequestor(type:JavaExec, dependsOn:[jar, "bootme"]) {
+task runRequestor(type:JavaExec, dependsOn:[install]) {
+    description = 'Runs a service requestor executing a local or remote service.'
+    main = "sorcer.core.requestor.ExertRequestor"
+    classpath = sourceSets.main.runtimeClasspath
+    systemProperty "java.rmi.server.codebase",
+            "${websterUrl}/${repoPath()}/coffeemaker-${version}-dl.jar ${websterUrl}/sorcer-dl-${version}.jar ${websterUrl}/jsk-dl-${riverVersion}.jar"
+
+    dependsOn([install, bootme])
+//  args = ["edu.pjatk.inn.requestor.CoffeeMakerExertRequestor", "netlet"]
+    args = ["edu.pjatk.inn.requestor.CoffeeMakerExertRequestor", "exertion"]
+//    args = ["edu.pjatk.inn.requestor.CoffeeMakerExertRequestor", "model"]
+    finalizedBy (stopme)
+}
+
 test {
     description = 'Tests local and remote services with JUnit test case.'
     systemProperty "java.rmi.server.codebase",
@@ -124,7 +139,7 @@ test {
     dependsOn([install, bootme])
     finalizedBy(stopme)
 }
-test.enabled = false
+//test.enabled = false
 
 
 
diff --git a/examples/coffeemaker/src/main/java/edu/pjatk/inn/coffeemaker/impl/CoffeeMaker.java b/examples/coffeemaker/src/main/java/edu/pjatk/inn/coffeemaker/impl/CoffeeMaker.java
index 87ac9b0..81c2d92 100755
--- a/examples/coffeemaker/src/main/java/edu/pjatk/inn/coffeemaker/impl/CoffeeMaker.java
+++ b/examples/coffeemaker/src/main/java/edu/pjatk/inn/coffeemaker/impl/CoffeeMaker.java
@@ -246,8 +246,15 @@ public Context getRecipes(Context context) throws RemoteException, ContextExcept
 	@Override
 	public Context makeCoffee(Context context) throws RemoteException, ContextException {
 		String recipeName = (String)context.getValue("recipe/name");
+		Context recipeContext = (Context)context.getValue("recipe");
+		if (recipeContext != null)
+			addRecipe(recipeContext);
+		int amtPaid = 0;
+		if (context.getValue("coffee/paid") != null)
+			amtPaid  = (Integer)context.getValue("coffee/paid");
 		Recipe r = getRecipeForName(recipeName);
-		context.putValue("", makeCoffee(r, r.getPrice()));
+		if (amtPaid != 0)
+			context.putValue("change", makeCoffee(r, amtPaid));
 		context.putValue("price", r.getPrice());
 
 		if (context.getReturnPath() != null) {
diff --git a/examples/coffeemaker/src/main/java/edu/pjatk/inn/requestor/CoffeeMakerExertRequestor.java b/examples/coffeemaker/src/main/java/edu/pjatk/inn/requestor/CoffeeMakerExertRequestor.java
new file mode 100755
index 0000000..a0fb045
--- /dev/null
+++ b/examples/coffeemaker/src/main/java/edu/pjatk/inn/requestor/CoffeeMakerExertRequestor.java
@@ -0,0 +1,96 @@
+package edu.pjatk.inn.requestor;
+
+import edu.pjatk.inn.coffeemaker.CoffeeService;
+import edu.pjatk.inn.coffeemaker.Delivery;
+import edu.pjatk.inn.coffeemaker.impl.CoffeeMaker;
+import edu.pjatk.inn.coffeemaker.impl.DeliveryImpl;
+import sorcer.core.provider.rendezvous.ServiceJobber;
+import sorcer.core.requestor.ExertRequestor;
+import sorcer.service.*;
+import sorcer.service.modeling.Model;
+
+import java.io.File;
+
+import static sorcer.co.operator.*;
+import static sorcer.eo.operator.*;
+import static sorcer.mo.operator.response;
+import static sorcer.mo.operator.responseUp;
+import static sorcer.eo.operator.result;
+import static sorcer.po.operator.invoker;
+
+public class CoffeeMakerExertRequestor extends ExertRequestor {
+
+    public Mogram getMogram(String... args) throws MogramException {
+
+        String option = "exertion";
+        if (args != null && args.length == 2) {
+            option = args[1];
+        } else if (this.args != null) {
+            option = this.args[0];
+        } else {
+            throw new MogramException("wrong arguments for: ExertRequestor type, mogram type");
+        }
+        try {
+            if (option.equals("netlet")) {
+                return (Exertion) evaluate(new File("src/main/netlets/coffeeMaker.ntl"));
+            } else if (option.equals("model")) {
+                return createModel();
+            } else if (option.equals("exertion")) {
+                return createExertion();
+            }
+        } catch (Exception e) {
+            throw new MogramException(e);
+        }
+        return null;
+    }
+
+    private Context getEspressoContext() throws ContextException {
+        return context(ent("name", "espresso"), ent("price", 50),
+                ent("amtCoffee", 6), ent("amtMilk", 0),
+                ent("amtSugar", 1), ent("amtChocolate", 0));
+    }
+
+    private Task getRecipeTask() throws MogramException, SignatureException {
+        // make sure we have a recipe for required coffee
+       return task("recipe", sig("addRecipe", CoffeeService.class), getEspressoContext());
+    }
+
+    private Exertion createExertion() throws Exception {
+        Task coffee = task("coffee", sig("makeCoffee", CoffeeService.class), context(
+                ent("recipe/name", "espresso"),
+                ent("coffee/paid", 120),
+                ent("recipe", getEspressoContext())));
+
+        Task delivery = task("delivery", sig("deliver", Delivery.class), context(
+                ent("location", "PJATK"),
+                ent("room", "101")));
+
+        Job drinkCoffee = job(coffee, delivery);
+
+        return drinkCoffee;
+    }
+
+    private Model createModel() throws Exception {
+        exert(getRecipeTask());
+
+        // order espresso with delivery
+        Model mdl = model(
+                ent("recipe/name", "espresso"),
+                ent("paid$", 120),
+                ent("location", "PJATK"),
+                ent("room", "101"),
+
+                srv(sig("makeCoffee", CoffeeService.class,
+                        result("coffee$", inPaths("recipe/name")))),
+                srv(sig("deliver", Delivery.class,
+                        result("delivery$", inPaths("location", "room")))));
+//				ent("change$", invoker("paid$ - (coffee$ + delivery$)", ents("paid$", "coffee$", "delivery$"))));
+
+        add(mdl, ent("change$", invoker("paid$ - (coffee$ + delivery$)", ents("paid$", "coffee$", "delivery$"))));
+        dependsOn(mdl, ent("change$", "makeCoffee"), ent("change$", "deliver"));
+        responseUp(mdl, "makeCoffee", "deliver", "change$", "paid$");
+
+        return mdl;
+    }
+
+}
\ No newline at end of file
diff --git a/examples/coffeemaker/src/test/java/edu/pjatk/inn/coffeemaker/CoffeeServiceTest.java b/examples/coffeemaker/src/test/java/edu/pjatk/inn/coffeemaker/CoffeeServiceTest.java
index 8299d3b..2c00d9c 100755
--- a/examples/coffeemaker/src/test/java/edu/pjatk/inn/coffeemaker/CoffeeServiceTest.java
+++ b/examples/coffeemaker/src/test/java/edu/pjatk/inn/coffeemaker/CoffeeServiceTest.java
@@ -1,5 +1,7 @@
 package edu.pjatk.inn.coffeemaker;
 
+import edu.pjatk.inn.coffeemaker.impl.CoffeeMaker;
+import edu.pjatk.inn.coffeemaker.impl.DeliveryImpl;
 import edu.pjatk.inn.coffeemaker.impl.Recipe;
 import org.junit.After;
 import org.junit.Before;
@@ -9,10 +11,9 @@
 import org.slf4j.LoggerFactory;
 import org.sorcer.test.ProjectContext;
 import org.sorcer.test.SorcerTestRunner;
+import sorcer.core.provider.rendezvous.ServiceJobber;
 import sorcer.eo.operator;
-import sorcer.service.Context;
-import sorcer.service.ContextException;
-import sorcer.service.Exertion;
+import sorcer.service.*;
 import sorcer.service.modeling.Model;
 
 import static edu.pjatk.inn.coffeemaker.impl.Recipe.getRecipe;
@@ -153,5 +154,23 @@ public void deliverCoffee() throws Exception {
 		assertEquals(value(result(mod), "change$"), 10);
 	}
 
+	@Test
+	public void getCoffee() throws Exception {
+
+		Task coffee = task("coffee", sig("makeCoffee", CoffeeMaker.class), context(
+				inEnt("recipe/name", "espresso"),
+				inEnt("coffee/paid", 120),
+				inEnt("recipe", espresso)));
+
+		Task delivery = task("delivery", sig("deliver", DeliveryImpl.class), context(
+				inEnt("location", "PJATK"),
+				inEnt("room", "101")));
+
+		Job drinkCoffee = job(sig("exert", ServiceJobber.class), coffee, delivery);
+
+		Context out = upcontext(exert(drinkCoffee));
+
+		logger.info("out: " + out);
+	}
 }
 
diff --git a/examples/service/build.gradle b/examples/service/build.gradle
index 2f70016..b927304 100755
--- a/examples/service/build.gradle
+++ b/examples/service/build.gradle
@@ -108,11 +108,11 @@ task runRequestor(type:JavaExec, dependsOn:[install]) {
     systemProperty "requestor.properties", "${projectDir}/configs/adder-req.properties"
     systemProperty "java.rmi.server.codebase",
             "${websterUrl}/${repoPath()}/adder-${version}-dl.jar ${websterUrl}/sorcer-dl-${version}.jar ${websterUrl}/jsk-dl-${riverVersion}.jar"
-//  args = ["sorcer.requestor.adder.AdderRequestor", "netlet"]
     dependsOn([install, bootme])
     //  Dynamic option requires service provisioning support - bootSorcerRio
 //  args = ["sorcer.requestor.adder.AdderRequestor", "dynamic"]
     args = ["sorcer.requestor.adder.AdderRequestor", "model"]
+    //  args = ["sorcer.requestor.adder.AdderRequestor", "netlet"]
     finalizedBy (stopme)
 }
 
